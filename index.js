const express = require("express");
const cors = require("cors");
const https = require("https");
const { Client, GatewayIntentBits } = require("discord.js");

const app = express();
const allowedUsers = new Set();

// üîë –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
const BOT_TOKEN = process.env.BOT_TOKEN;
const OWNER_ID = "832278157066240040"; // ‚Üê —Ç–≤–æ–π Discord ID

// üåê Middleware
app.use(cors());
app.use(express.json());

// üì° API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–∞
app.post("/verify", (req, res) => {
    const { id } = req.body;
    if (!id) return res.status(400).json({ status: "error", message: "Missing ID" });

    const approved = allowedUsers.has(id);
    res.json({ status: approved ? "approved" : "denied" });
});

// üåç –ñ–∏–≤–æ–π –º–∞—Ä—à—Ä—É—Ç
app.get("/", (req, res) => {
    res.send("‚úÖ API –∏ –±–æ—Ç —Ä–∞–±–æ—Ç–∞—é—Ç!");
});

// üîÅ Self-ping (30 —Å–µ–∫) –¥–ª—è –ª–æ–≥–æ–≤ Koyeb (–Ω–µ –æ–±—è–∑–∞—Ç–µ–ª–µ–Ω)
setInterval(() => {
    https.get("https://nerest-project.koyeb.app/", res => {
        console.log("üîÅ Self-ping:", res.statusCode);
    }).on("error", err => {
        console.error("‚ùå Self-ping error:", err.message);
    });
}, 1000 * 30);

// ü§ñ Discord –±–æ—Ç
const client = new Client({
    intents: [
        GatewayIntentBits.Guilds,
        GatewayIntentBits.GuildMessages,
        GatewayIntentBits.MessageContent,
    ],
});

client.on("ready", () => {
    console.log(`ü§ñ –ë–æ—Ç ${client.user.tag} –∑–∞–ø—É—â–µ–Ω`);
});

client.on("messageCreate", (message) => {
    if (message.author.bot) return;

    const isAdmin = message.author.id === OWNER_ID;
    const mention = message.mentions.users.first();

    if (message.content.startsWith("!—Ä–∞–∑—Ä–µ—à–∏—Ç—å")) {
        if (!isAdmin) return message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.");
        if (!mention) return message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `!—Ä–∞–∑—Ä–µ—à–∏—Ç—å @user`");
        allowedUsers.add(mention.id);
        message.reply(`‚úÖ –î–æ—Å—Ç—É–ø –≤—ã–¥–∞–Ω –¥–ª—è <@${mention.id}>`);
    }

    if (message.content.startsWith("!–∑–∞–±—Ä–∞—Ç—å")) {
        if (!isAdmin) return message.reply("‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –¥–ª—è —ç—Ç–æ–π –∫–æ–º–∞–Ω–¥—ã.");
        if (!mention) return message.reply("‚ùå –£–∫–∞–∂–∏—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: `!–∑–∞–±—Ä–∞—Ç—å @user`");
        if (allowedUsers.delete(mention.id)) {
            message.reply(`‚ùå –î–æ—Å—Ç—É–ø –æ—Ç–æ–∑–≤–∞–Ω —É <@${mention.id}>`);
        } else {
            message.reply(`‚ÑπÔ∏è –£ <@${mention.id}> –Ω–µ –±—ã–ª–æ –¥–æ—Å—Ç—É–ø–∞`);
        }
    }
});

// üöÄ –ó–∞–ø—É—Å–∫
const PORT = process.env.PORT || 3000;
app.listen(PORT, () => {
    console.log(`üåê API —Å–ª—É—à–∞–µ—Ç –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`);
});

client.login(BOT_TOKEN);